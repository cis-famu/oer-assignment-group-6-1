Upon completion of this chapter, students will be able to:

1. Identify and use control structures 
2. Identify logical and relational operators, how they work, and order of precedence
3. Distinguish the relationship of relational operators and simple data types
4. Identify how to form and evaluate logical (Boolean) expressions
5. Use one-way and/or two way selection syntax
6. Utilize pseudocode to develop,test, and debug a program
7. Demonstrate a switch statement in a program 
8. Identify how to avoid bugs
9. Use the assert function to terminate a program 

##Introductions 

In the previous section, we covered how decisions are integrated into programs. In this chapter, we'll shift our focus to how programs 
handle repetitive tasks. We'll explore loops and iterations, which are essential tools for improving program functionality. By the end of 
this chapter, you'll have a solid understanding of how incorporating repetitions enhances the strength and adaptability of computer 
programs.

## While looping (Repetition) Structure

example: while(expression)
            statement

"While" is one of the reserved words in c++, with the statement being either simple or a compound statement. The expression is a decision maker
while also being a logical expression usually. The body of the loop is the statement.
*Note: parentheses are part of syntax*
The expression is a entry condition, meaning that for the statment to execute the loops condition has to be proven true instead of false. The statement 
will execute until the condition is proven false. There is another loop called an infinity loop, a loop that continues to execute endlessly. To avoid this
one should make sure that the loops body has statements that assure each condition. For the while loop the expression will eventually be false.
These loops also use variables as loop control, typically it is the letter "i".
