#Objectives 

Upon completion of this chapter, students will be able to:

1. Identify the need for repetition control
2. Distinguish the use of while loops including for, do, eof
3. Write if and else statements
4. Test break and continue statements 
5. Build nested control structures
6. Indentify methods to prevent bugs and debug loops

##Introductions 

In the previous section, we covered how decisions are integrated into programs. In this chapter, we'll shift our focus to how programs 
handle repetitive tasks. We'll explore loops and iterations, which are essential tools for improving program functionality. By the end of 
this chapter, you'll have a solid understanding of how incorporating repetitions enhances the strength and adaptability of computer 
programs.

## While looping (Repetition) Structure

example: while(expression)
            statement

"While" is one of the reserved words in c++, with the statement being either simple or a compound statement. The expression is a decision maker
while also being a logical expression usually. The body of the loop is the statement.
*Note: parentheses are part of syntax*
The expression is a entry condition, meaning that for the statment to execute the loops condition has to be proven true instead of false. The statement 
will execute until the condition is proven false. There is another loop called an infinity loop, a loop that continues to execute endlessly. To avoid this
one should make sure that the loops body has statements that assure each condition. For the while loop the expression will eventually be false.
These loops also use variables as loop control, typically it is the letter "i".

## eof Function 

This variable is used to determine the end of file status, eof is a member of the data type istream.
Example: istreamVar.eof()
In this example istream is an input stream variable just like cin. The function eof works best if the input is text, the earlier method of using this function
worked better with numbers.

## for Looping (Repetition) Structure 

The for loop is a specialized form of the while loop with the primary purpose being to simplify the writing of counter controlled loops, this loop is also called a 
counted or index for loop.
Example: for (initial statement; loop condition; update statement)
            statement
What controls the stament of the for staement is the initial statement, loop condition, and update statement.
How for loops execute:
1. initial statement executes
2. the loop condition evaluates to true
             - executes for loop statement
             - executes update statement 
3. repeat until loop condition is proven false
*Note: the initial statement in the for loop is the first statement to execute; it executes only once*
The statements of for loops can either be simple or compound just like the while loop.

## do...while Looping (Repetition) Structure

Example: do 
            statement 
         while (expression);
Just like the other statement do...while can also be simple or compound, if by chance it is a compound enclose it between braces. With do...while, the statement executes first,
and then the expression is evaluated. If evaluated as true the statement will execute again. Infinite loops can be avoided by making sure the loop bod contains a statement that 
makes the expression false and assures that it exits properly. The do...while loop is the only loop in this section that evaluates the expression after executing the statement, 
this makes it a posttest loop. This loop also has a exit condition, meaning it will always execute the statement at least once. A do...while loop can as well be used as a input 
validation.
Example: 
int score;

do
{
            cout<<"Enter a score between 0 and 50: ";
            cin>>score;
            cout<<endl;
}
while (score < 0 || score > 50);
