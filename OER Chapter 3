# Control Structures I (Selection)

## Objectives 
When completed, students will be able to:
1. Identify and use control structures
2. Identify Logical and relational operators, how they work, and the order of precedence
3. Distinguish the relationship between relational operators and simple data types
4. Identify how to form and evaluate logical (Boolean) expressions
5. Use one-way and/or two-way selection syntax
6. Utilize pseudocode to develop, test, and debug a program
7. Demonstrate a switch statement in a program 
8. Identify how to avoid bugs
9. Use the assert function to terminate a program

## Introduction 

In previous chapters, programs were defined as a sequence of statements that had the goal of 
accomplishing tasks. All straightforward. Within this chapter as well as Chapter 5,
you will be taught how to tell a computer that it doesn't have to follow a simple statement, and that
it can also make its own decisions and repeat statements until certain conditions are met.

### Identify and Use control structures

There are three ways a computer can process a program: in sequence, selectively, and by making a 
choice, this can also be called a branch; respectively, by executing a statement over and over using a 
loop or calling a function. With sequential programs, computers start at the beginning  and follow the 
statements to the end without making any choices. Control structures provide 
another option for sequential program execution and are used to alter the sequential flow of execution 
The two most common control structures are selection and repetition. 
Selection: The program executes particular statements depending on some conditions. 
Repetition: The program repeats particular statements a certain number of times based on some condition.

### Identify logical and relational operators, how they work, and the order of precedence 

Logical expression: An expression that evaluates to true or false
Example: 
    "8 is greater than 3"  is true, the expression 8>3 is a logical expression.
*Note: > is an operater*

### Distinguish the relational operators and simple data types

You can use the relational operators with all three simple data types.
Example: 8 > 15...false
         6 != 6...false
         5.9 <= 7.5...true
         R > T...false (According to the ASCII values of both characters)

### Identify how to form and evaluate logical (Boolean) expressions

Logical expressions are evaluated to either 1 or 0, meaning the value of logical expressions is stored in a variable of 
the data type int. Therefore, you can use the int data type to manipulate logical (Boolean) expressions.

int legalAge;
int age;
legalAge = 21;
legalAge = (age >= 21); This would give a value of 1 which means true.

You can also use the bool data type. Which would be the same outcomes as using the int data type.

 ### Use one-way and/or two-way selection syntax

One-way and two-way selection syntax are commonly used in programming to control the execution flow based on
certain conditions. One-way selection, also known as an "if statement," allows the program to execute a block of 
code if a specified condition is true. Two-way selection, often implemented using "if-else" statements, allows the program 
to execute one block of code if the condition is true and another block if the condition is false.


### Utilize pseudocode to develop, test, or two-way selection syntax

 you can debug the program by checking each step of the implementation against the pseudocode to identify
where the issue might be. Common debugging techniques include printing the values of variables, tracing the flow 
of execution, and using debugging tools provided by your programming environment.

### Identifying switch Structures 

Switch structures eliminate the need for evaluating a logical expression, providing the computer with the ability to select 
from numerous alternatives.

switch(expression) // general syntax for a switch statement
{
case value1 : 
    statements1
    break;
case value2 :
    statements2
    break;


case valuen :
    statements
    break;
default :
    statements

In C++, "switch" is a reserved word. In a switch structure, the initial step is evaluating the expression, also known as the selector. 
Case values must be distinct. After a case label, one or more statements can be used without needing braces. The presence 
or absence of a break statement can vary after each statement.

The switch statement follows these rules:

1. If the expression value matches a case value, the statements execute until a break statement is encountered or the end of the switch
the structure is reached.
2. If the expression value doesn't match any case values, the statements after the default label are executed. If there's no default 
label and no match, the switch statement has no effect.
3. The break statement immediately exits the switch structure.

### Utilizing the assert function to terminate a program

The assert function is a built-in tool that stops program execution when tricky errors occur. 

Its syntax is simple: assert(expression). 

If the expression is true, the next statement runs; if false, the program stops and points to the error location. The assert 
function's details are in the cassert header file. 

To use it, include #include <cassert> in the program.

### Summary

- Three ways a computer can process a program:
  - In sequence
  - Selectively, also known as branching
  - By making a choice, analogous to a branch
  - Repeatedly, executing a statement over and over using a loop or calling a function.

- Sequential programs involve computers starting at the beginning and following statements to the end without making choices.

- Control structures offer options to sequence program execution and alter the sequential flow.
  
- Two common control structures:
  - Selection: The program executes specific statements based on conditions.
  - Repetition: The program repeats specific statements a certain number of times depending on a condition.

- Relational operators, such as <, >, <=, >=, ==, and !=, can be used with all three simple data types.

- Logical expressions evaluate to either 1 or 0.
- The values of logical expressions are stored in a variable of the data type `int`.
- As a result, you can use the `int` data type to manipulate logical (Boolean) expressions.

- One-way and two-way selection syntax are commonly used in programming to control the execution flow based on conditions.
- One-way selection, known as an "if statement," executes a block of code if a specified condition is true.
- Two-way selection, implemented with "if-else" statements, executes one block of code if the condition is true and another block if 
the condition is false.

- Debugging a program involves checking each step of the implementation against the pseudocode to identify issues.
- Common debugging techniques include:
  - Printing the values of variables during execution.
  - Tracing the flow of execution to understand the program's path.
  - Utilizing debugging tools provided by the programming environment for more detailed analysis.

- Switch structures eliminate the need for evaluating a logical expression, enabling the computer to choose from various alternatives.
- In C++, "switch" is a reserved word used to implement switch structures.
- In a switch structure, the initial step involves evaluating the expression, also known as the selector.
- Case values within a switch structure must be distinct.
- After a case label, one or more statements can be included without needing braces.
- The presence or absence of a break statement can vary after each statement.

- The switch statement adheres to the following rules:
    - If the expression value matches a case value, the statements execute until encountering a break statement or reaching the end of 
    the switch structure.
    - If the expression value doesn't match any case values, the statements after the default label are executed. The switch statement 
has no effect if there's no default label and no match.
    - The break statement immediately exits the switch structure.

- The assert function is a built-in tool designed to halt program execution when encountering challenging errors.
- Its syntax is straightforward: assert(expression).
- If the expression evaluates as true, the next statement is executed; if false, the program stops and indicates the error location.
- The specifications of the assert function are found in the cassert header file.
- To use the assert function in a program, include #include <cassert>.

### Key Terms 

1. Logical expression: an expression that evaluates to true or false 

2. Logical (Boolean) operators: allow combination logical expressions

3. Associativity: refers to the order in which operators of the same precedence are grouped and evaluated in an expression. It 
determines the direction in which an expression is evaluated when it contains multiple operators with the same precedence level.

4. Nested: refers to the practice of placing constructs (such as loops or conditional statements) within each other. This creates a 
hierarchical structure where one construct is contained within another.

Logical (Boolean) Operators: are used to perform operations on Boolean values. 

5. Short Circuit Evaluation: a behavior in C++ where the second operand of a logical AND (`&&`) or logical OR (`||`) expression is not 
evaluated if the result can be determined by only evaluating the first operand. This can improve performance and prevent unnecessary 
evaluations.

6. Conditional/ternary operator: used for evaluating a condition and returning one of two values based on whether the condition is 
true or false. 

7. Pseudocode: a high-level description of a computer program or algorithm that uses a mix of natural language and structured 
programming conventions. It is not specific to any programming language and is used as a planning tool before coding.

8. Switch Structure: a control structure used for selective execution. It evaluates an expression and executes a block of code based on 
the matched case values. It provides an alternative to a series of nested if-else statements.

9. Selector: refers to the expression or variable whose value is being evaluated to determine the flow of execution. It is the 
criterion used to match case values in a switch statement.

### Review Questions

    1. _____ alter the normal flow of execution. // ans. Control Structures

    2. Which of the following are not relational operators? // ans. e. ||
        a. >
        b. ==
        c. =
        d. !=
        e. ||

    3. True or False. In C++, =, is the equality operator. // ans. False

### Programming Exercise 

1. Create a program that requests the user to enter a number. Subsequently, display both the entered number and a message indicating 
whether the number is positive, negative, or zero. // Code Below

#include <iostream> 

int main() {
    
    cout << "Enter a number between 1 and 10: ";
    
    int number;
    
    cin >> number;

    cout << "You entered: " << number << endl;

    if (number > 0) {
        cout << "The number is positive." << endl;
    } else if (number < 0) {
        cout << "The number is negative." << endl;
    } else {
        cout << "The number is zero." << endl;
    }

    return 0;
}

### References 

1. Malik, D. S. (2015). C++ Programming: From problem analysis to program design (Eighth). Cengage Learning. 

2. W3Schools. (n.d.). C++ booleans. https://www.w3schools.com/cpp/cpp_booleans.asp 

### Editor 

Kiara Lynch 
