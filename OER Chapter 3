# Control Structures I (Selection)

## Objectives 
When compeleted, students will be able to:
1. Indentify and use control structures
2. Indentify Logical and relational operstors, how they work, and order of precedence
3. Distinguish the relationship of relational operators and simple data types
4. Indentify how to form and evaluate logical (Boolean) expressions
5. Use one-way and/or two-way selection syntax
6. Utilize pseudocode to develope, test, and debug a progam
7. Demonstrate a switch statement in a program 
8. Indentify how to avoid bugs
9. Use the assert function to terminate a program

## Introduction 

In previous chapters progams were defined as a sequence of statements which had the goal of 
accomplishing tasks. All very simple and straight forward. Within this chapter as well as chapter 5,
you will be taught how to tel a computer that it doesn't have to follow a simple statement, and that
it can also make its own decisions and repeat statements until certain conditions are met.

### Indentify and Use control structures

There are three ways a computer can process a program: in sequence, selectively, and by making a 
choice, this can also be called a branch; repeatively, by excuting a statement over and over using a 
loop or calling a function. With sequential programs computers start at the beginning  and follow the 
statements in order all the way to the end without making any choices. Control structures provide 
another option to sequection program execution and are used to alter the sequential flow of execution 
The two most commoncontorl structures are selection and repetition. 
Selection: program executes particular statements depedning on some conditions. 
Repition: The program repeats particular statements a certain mnumber of times based on some condition.

### Indentify logical and relational operators, how they work, and order of precedence 

Logical expression: An expression that evaluates to true or fasle
Example: 
    "8 is greater than 3"  is true, the expression 8>3 is a logical expression.
*Note: > is an operater*



