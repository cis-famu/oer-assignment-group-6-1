# Control Structures I (Selection)

## Objectives 
When compeleted, students will be able to:
1. Indentify and use control structures
2. Indentify Logical and relational operstors, how they work, and order of precedence
3. Distinguish the relationship of relational operators and simple data types
4. Indentify how to form and evaluate logical (Boolean) expressions
5. Use one-way and/or two-way selection syntax
6. Utilize pseudocode to develope, test, and debug a progam
7. Demonstrate a switch statement in a program 
8. Indentify how to avoid bugs
9. Use the assert function to terminate a program

## Introduction 

In previous chapters progams were defined as a sequence of statements which had the goal of 
accomplishing tasks. All very simple and straight forward. Within this chapter as well as chapter 5,
you will be taught how to tel a computer that it doesn't have to follow a simple statement, and that
it can also make its own decisions and repeat statements until certain conditions are met.

### Indentify and Use control structures

There are three ways a computer can process a program: in sequence, selectively, and by making a 
choice, this can also be called a branch; repeatively, by excuting a statement over and over using a 
loop or calling a function. With sequential programs computers start at the beginning  and follow the 
statements in order all the way to the end without making any choices. Control structures provide 
another option to sequection program execution and are used to alter the sequential flow of execution 
The two most commoncontorl structures are selection and repetition. 
Selection: program executes particular statements depedning on some conditions. 
Repition: The program repeats particular statements a certain mnumber of times based on some condition.

### Indentify logical and relational operators, how they work, and order of precedence 

Logical expression: An expression that evaluates to true or fasle
Example: 
    "8 is greater than 3"  is true, the expression 8>3 is a logical expression.
*Note: > is an operater*

### Distinguish the relational operators and simple data types

You can use the relational operators with all three simple data types.
Example: 8 > 15...false
         6 != 6...false
         5.9 <= 7.5...true
         R > T...false (According to the ASCII values of both characters)

### Identify how to form and evaluate logical (Boolean) expressions

Logical expressions evaluate to either 1 or 0, meaning the value of logical expressions are stored in a variable of 
the data type int . Therefore, you can use the int data type to manipulate logical (Boolean) expressions.

int legalAge;
int age;
legalAge = 21;
legalAge = (age >= 21); This would give a value of 1 which means true.

You can also use the bool data type. Which would be the same outcomes as using the int data type.

 ### Use one-way and/or two-way selection syntax

One-way and two-way selection syntax are commonly used in programming to control the flow of execution based on
certain conditions. One-way selection, also known as an "if statement," allows the program to execute a block of c
ode if a specified condition is true. Two-way selection, often implemented using "if-else" statements, allows the program 
to execute one block of code if the condition is true and another block if the condition is false.


### Utilize pseducode to develop, test, or two way selection syntax

 you can debug the program by checking each step of the implementation against the pseudocode to identify
where the issue might be. Common debugging techniques include printing the values of variables, tracing the flow 
of execution, and using debugging tools provided by your programming environment.

### Demonstrate a switch statements in a program

The first structures that were implemented with if and if...else statements, these usally require the evaluation of a
expression. The second selection structure is a switch sturcture, these do not require a expression. Switches
structure givs the computer power to choose from among many alternatives. The switch expression are a variable identifier,
complex expression, and also can evaluate to a logical value. Nested switch statements are used to incorporate multilevel
selections. Switch statements are looked as a elegant way to implemnet multiple selections.

### Identify how to avoid bugs


