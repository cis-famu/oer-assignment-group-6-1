#Objectives
After completing this chapter, students will:

Understand the purpose of arrays and their importance in programming.
Be able to declare and initialize arrays in their code.
Demonstrate proficiency in manipulating data within arrays.
Recognize the limitations and restrictions associated with array processing.
Learn to pass arrays as parameters to functions, facilitating modular and efficient code.
Gain proficiency in searching and sorting arrays to efficiently manage data.
Understand the usage of auto declarations for simpler and cleaner code.
Master the use of range-based for loops for iterating over arrays.
Learn to use C-strings for inputting and outputting data, enhancing string manipulation skills.
Define and work with parallel, two-dimensional, and multidimensional arrays for handling complex data structures.

#Introduction
In previous chapters, you worked with simple data types. In Chapter 2, you learned that C++ data types fall into three categories: 
simple, structured, and pointers. One of these categories is the structured data type. This chapter and the next few chapters focus
on structured data types. Recall that a data type is called simple if variables of that type can store only one value at a time. 
In contrast, in a structured data type, each data item is a collection of other data items. Simple data types are building blocks of 
structured data types. The first structured data type that we will discuss is an array. In Chapters 9 and 10, we will discuss other structured data types.
Before formally defining an array, let us consider the following problem. We want to write a C++ program that reads five numbers, 
finds their sum, and prints the numbers in reverse order.

## Arrays
A one-dimensional array is a grouping of a set number of elements, all of which are of the same data type and stored in adjacent memory 
locations. In simpler terms, it's like a list where each element follows the next one in sequence. This section specifically covers 
one-dimensional arrays, while arrays with two or more dimensions will be covered in later chapters.
The typical syntax used to declare a one-dimensional array is:
                                              
                                                dataType arrayName[intExp];

where 'intExp' specifies the quantity of elements in the array and can be any constant expression that results in a positive integer 
value.

## Accessing Array Components
The typical syntax used to access an array element is:

                                                  arrayName[indexExp]

The indexExp, referred to as the index, is any expression that evaluates to a nonnegative integer. This index value indicates 
the position of the component within the array. In C++, the [] operator is known as the array subscripting operator. Additionally, 
array indexing in C++ begins at 0.

## Processing One-Dimensional Arrays
Several fundamental operations carried out on a one-dimensional array include initializing the array, inputting data into it, outputting 
the stored data, and identifying the largest or smallest element. Additionally, for numeric data, common operations involve calculating 
the sum and average of the array's elements. Each of these tasks necessitates traversing through the array elements, typically achieved 
using a loop. For instance, consider the following statements:

                                        int list[500]; // List is an array with the size 500
                                        int i;

The following 'for' loop iterates through each element of the array 'list', beginning with the first element of 'list':

                                               for (i = 0; i < 500; i++) // Line 1
                                                   // process list[i]    // Line 2

If it's necessary to input data into the array 'list' during processing, the statement on Line 2 would typically be an input statement 
like 'cin'. For instance, the following code snippet reads 500 numbers from the keyboard and stores them in the array 'list':

                                                for (i = 0; i < 500; i++) // Line 1
                                                    cin >> list[i];       // Line 2

Likewise, if outputting the data from the array 'list' is required during processing, the statement on Line 2 would be an output 
statement. For instance, the following code snippet outputs the numbers stored in the array 'list'.

                                                for (i = 0; i < 500; i++) // Line 1
                                                    cout << list[i] << " "; // Line 2
                                                cout << end1;

## Array Index Out Of Bounds
Let's examine the following declaration:
                                                          double num[11];
                                                          int i;

The element 'num[i]' is considered valid if 'i' is one of the following values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, or 10.

An index of an array, denoted as 'index', is considered within bounds if 'index' falls between 0 and 'ARRAY_SIZE - 1', meaning 
'0 <= index <= ARRAY_SIZE - 1'. If 'index' is negative or exceeds 'ARRAY_SIZE - 1', it is considered out of bounds.
Unfortunately, in C++, there is no automatic check to ensure that the index value is within this range ('0'  to 'ARRAY_SIZE - 1'). If 
the index goes out of bounds and the program attempts to access the specified array element, it accesses the memory location indicated 
by the index. This situation can lead to unintended modification or access of data in memory, or even attempts to access protected 
memory that can cause the program to crash abruptly. Consequently, various unexpected behaviors can occur if the index goes out of 
bounds during program execution. It is entirely the responsibility of the programmer to ensure that the index remains within the valid 
bounds of the array.
