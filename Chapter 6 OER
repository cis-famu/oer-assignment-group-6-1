#Objectives
After completing this chapter, students will:

Understand the purpose of arrays and their importance in programming.
Be able to declare and initialize arrays in their code.
Demonstrate proficiency in manipulating data within arrays.
Recognize the limitations and restrictions associated with array processing.
Learn to pass arrays as parameters to functions, facilitating modular and efficient code.
Gain proficiency in searching and sorting arrays to efficiently manage data.
Understand the usage of auto declarations for simpler and cleaner code.
Master the use of range-based for loops for iterating over arrays.
Learn to use C-strings for inputting and outputting data, enhancing string manipulation skills.
Define and work with parallel, two-dimensional, and multidimensional arrays for handling complex data structures.

#Introduction
In previous chapters, you worked with simple data types. In Chapter 2, you learned that C++ data types fall into three categories: 
simple, structured, and pointers. One of these categories is the structured data type. This chapter and the next few chapters focus
on structured data types. Recall that a data type is called simple if variables of that type can store only one value at a time. 
In contrast, in a structured data type, each data item is a collection of other data items. Simple data types are building blocks of 
structured data types. The first structured data type that we will discuss is an array. In Chapters 9 and 10, we will discuss other structured data types.
Before formally defining an array, let us consider the following problem. We want to write a C++ program that reads five numbers, 
finds their sum, and prints the numbers in reverse order.

## Arrays
A one-dimensional array is a grouping of a set number of elements, all of which are of the same data type and stored in adjacent memory 
locations. In simpler terms, it's like a list where each element follows the next one in sequence. This section specifically covers 
one-dimensional arrays, while arrays with two or more dimensions will be covered in later chapters.
The typical syntax used to declare a one-dimensional array is:
                                              
                                                dataType arrayName[intExp];

where `intExp` specifies the quantity of elements in the array and can be any constant expression that results in a positive integer 
value.

## Accessing Array Components
The typical syntax used to access an array element is:

                                                  arrayName[indexExp]

The indexExp, referred to as the index, is any expression that evaluates to a nonnegative integer. This index value indicates 
the position of the component within the array. In C++, the [] operator is known as the array subscripting operator. Additionally, 
array indexing in C++ begins at 0.
