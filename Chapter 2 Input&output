# Input/Output

##Objectives

After completeing this chapter students will be able to:

1. Identify input and output streams
2. Read data from the standard input device
3. Describe input stream functions get, ignore, putback, and peek
4. Write data to the standard output device
5. Use manipulators in a program to format output
6. Perform input and output operations using the string data type
7. Read data from a file (include examples)
8. Write data to a file (include examples)

## Introduction

In chapter 2 you were introduced to some of the C++ input/output (I/O) instructions,
which get data into a program and print the results on the screen. You used c i n 
and the extraction operator >> to get data from the keyboard, and c o u t and the 
insertion operator << to send output to the screen. Because I/O operations are fundamental
to any programming language, in this chapter, you will learn about C++ I/O operations in
more detail. First, you will learn about statements that extract input from the standard input
device. You will then learn how to format output using manipulators. In addition, you
will learn about te limitations of the I/O operations associated with the standard I/O
devices ad learn how to extend these operations to other devices.

## Indentify input and output streams 

Typically the standard input device is a keyboard, with the output being the screen of a computer. 
To send and output to the screen of a computer, programmers must use the header iostream. This 
header contains the two data types: istream (input stream) and ostream (output stream). This header
also contains two variables, those being: cin(see-in) for common input and cout (see-out) for common 
output. To use these variables one must use the preprocessor directive. A stream variable is either a 
input and output stream variable. In the next section you will learn how to use the functions "get", 
"ignore", "peek", and "putback" to input data in a specific way.
*Note: cin and cout are defined and have meanings, you should never redefine them in a program*

Definitions:
Input Stream: A sequence of characters from an input device to the computer
Output stream: A sequences of characters from the computer to an output device

## Read data from the standard input device 

The purpose of an input statment is to read and store values in a memory location. Only varibale refer
to memory locations, the right side is the variable.

'''cpp
cin >> variable >> variable...;
'''

Above is demostrating that a single input statement could read more than one date item. This is done by
using whats called a extraction operator (>>). Using >> extracts the next data item fomr the input stream.
For example:

'''cpp 
cin >> payRate >> hoursWorked;
'''

This line of code is no different than:

'''cpp
cin >> payRate;
cin >> hoursWorked;
'''

### Variables to note

When reading data into a "char" variable, after looking over the white space characters the >> finds a stores
the next single character. To read data into the variable "int" and "double", after skipping the whitespace characters
and reading + or -, the >> reads the numbers including the decimal point for floating point variables, this stops
when it finds another white space character or another character thats not a di

*Note: when entering character data like letters, you don't enter the single quotes around the character*

If an input stream has more data items then required, any of the values left in the input stream are disregard. When 
entering data to be processed, programers must remember that the data values should correspond with the data types of
the variables in the input statment. 
*Note: computers dont tolerate any kind of mismatch, like entering a "char" value into an "int" or "double" variabble causes 
and input failure*

## Describe Input Stream Functions get, ignore, putback, and peek

get: 
The variable cin has access to the stream function get, which is used to read character data. The get function inputs the 
very next character, including whitespace characters, from the input stream and stores it in the memory location indicated 
by its argument.

cin.get(varChar);
In the cin.get statement, varChar is a char variable. varChar, which is in parentheses following the function name, is called 
the argument or the parameter of the function. The effect of the preceding statement would be to store the next input character in the variable 
varChar.

ignore:
When you want to process only partial data (say, within a line), you can use the stream function ignore to discard a portion of the input.

Suppose intExp yields a value of, say 100. This statement says to ignore the next 100 characters or ignore the input until it encounters the 
character specified by chExp, whichever comes first. Consider the following statement:

cin.ignore(100, '\n');
When this statement executes, it ignores either the next 100 characters or all characters until the newline character is found, whichever comes first. 
For example, if the next 125 characters do not contain the newline character, then only the first 100 characters are discarded and the next 
input data is the character 101. However, if the 70th character is the newline character, then the first 70 characters are discarded and the next 
input data is the 71st character.

putback:
The stream function putback lets you put the last character extracted from the input stream by the get function back into the input stream.

cin.putback(ch);

peek:
The stream function peek looks into the input stream and tells you what the next character is without removing it from the input stream.

ch = cin.peek();

### Use Maniputlators in a Program to Format Output

cout << expression or manipulator << expression or manipulator...;

To use the manipulators, the program must include the header file iomanip. The following include statement is required:

#include <iomanip>

setPrecision(n):
Use the manipulator setprecision to control the output of floating-point numbers.

cout << setPrecision(2);

fixed:
To output floating-point numbers in a fixed decimal format, use the manipulator fixed. The following statement sets the output of 
floating-point numbers in a fixed decimal format on the standard output device:

cout << fixed;
All floating-point numbers are displayed in the fixed decimal format until the manipulator fixed is disabled. You can disable this manipulator 
by using the stream member function unsetf.

cout.unsetf(ios::fixed);
The output of the floating-point numbers returns to their default settings.

scientific:
scientific is used to output floating-point numbers in scientific notation format.

cout << scientific;

showpoint:
Suppose that the decimal of a decimal number is zero. When you tell the computer to output the decimal number in a 
fixed decimal format, the output may not show the decimal point and the decimal part. To make the output show the decimal point and trailing zeros, 
use the manipulator showpoint.

cout << showpoint;

