# Input/Output

##Objectives

After completeing this chapter students will be able to:

1. Identify input and output streams
2. Read data from the standard input device
3. Describe input stream functions get, ignore, putback, and peek
4. Write data to the standard output device
5. Use manipulators in a program to format output
6. Perform input and output operations using the string data type
7. Read data from a file (include examples)
8. Write data to a file (include examples)

## Introduction

In chapter 2 you were introduced to some of the C++ input/output (I/O) instructions,
which get data into a program and print the results on the screen. You used c i n 
and the extraction operator >> to get data from the keyboard, and c o u t and the 
insertion operator << to send output to the screen. Because I/O operations are fundamental
to any programming language, in this chapter, you will learn about C++ I/O operations in
more detail. First, you will learn about statements that extract input from the standard input
device. You will then learn how to format output using manipulators. In addition, you
will learn about te limitations of the I/O operations associated with the standard I/O
devices ad learn how to extend these operations to other devices.

## Indentify input and output streams 

Typically the standard input device is a keyboard, with the output being the screen of a computer. 
To send and output to the screen of a computer, programmers must use the header iostream. This 
header contains the two data types: istream (input stream) and ostream (output stream). This header
also contains two variables, those being: cin(see-in) for common input and cout (see-out) for common 
output. To use these variables one must use the preprocessor directive. A stream variable is either a 
input and output stream variable. In the next section you will learn how to use the functions "get", 
"ignore", "peek", and "putback" to input data in a specific way.
*Note: cin and cout are defined and have meanings, you should never redefine them in a program*

Definitions:
Input Stream: A sequence of characters from an input device to the computer
Output stream: A sequences of characters from the computer to an output device

## Read data from the standard input device 

The purpose of an input statment is to read and store values in a memory location. Only varibale refer
to memory locations, the right side is the variable.

'''cpp
cin >> variable >> variable...;
'''

Above is demostrating that a single input statement could read more than one date item. This is done by
using whats called a extraction operator (>>). Using >> extracts the next data item fomr the input stream.
For example:

'''cpp 
cin >> payRate >> hoursWorked;
'''

This line of code is no different than:

'''cpp
cin >> payRate;
cin >> hoursWorked;
'''
